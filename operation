ndarray 操 作 :


一. 排 序 :


    <1> 升 序 :
    
        np.sort(obj) 

            不 修 改 原 数 组

        obj.sort()

            会 修 改 原 数 组 

    
    <2> 降 序 :

        -np.sort(-obj)

            不 修 改 原 数 组 



二. 转 置 :


    <1> .reshape()

        不 改 变 原 数 组 


    <2> obj.T

        结 果 :

            二 维 转 置 : 一 二 维 互 换

            三 维 转 置 : 一 三 维 互 换  


    <3> .tolist()

        转为 Python list



三. 拼 接 :


    ndarray 是保存在内存中的一段连续值,增加值操作会重新分配内存,浪费空间

    不推荐,可以用 <合并数组> 的方式模拟增加值

    注 意 : 相 同 维 度 的 数 组 才 能 进 行 拼 接

    <1> np.concatenate((nd1,nd2),axis=0/1) 

            0 按 行 拼 接

            1 按 列 拼 接

    <2> np.concatenate((nd1,nd2.T),axis=0/1) 

        转 置 后 拼 接 



四. 数 组 行 列 删 除 :


    np.delete(arr,obj,axis=1/0)

    删除了视图值,原值不变

    删除操作不能精确选取元素,常被索引和切片查询赋值新变量替代

    理 解 要 点 : axis = 0 一维上的

                  axis = 1 二维上的

                  axis = 2 三维上的

                  shape(一维,二维,三维)

    语 法 : 
    
        np.delete(obj,index,axis=某维)
